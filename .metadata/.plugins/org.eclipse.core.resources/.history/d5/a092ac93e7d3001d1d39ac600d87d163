@lazy
pre {
    var numCourses = Course.all.size();
}

context Student {
    constraint ValidName {
        check: self.name.trim().size() > 0
        message: "Student name must not be empty"

        fix {
            title: "Set name to 'Unknown'"
            do {
                self.name = 'Unknown';
            }
        }
    }

    constraint ValidGradeLevel {
        check: self.gradeLevel >= 1 and self.gradeLevel <= 12
        message: "Student grade level must be between 1 and 12"
    }
}

context Course {
    @lazy
    constraint TooManyPrerequisites {
        guard: self.prerequisites.isNotEmpty()
        
        check {
            var tooMany = self.prerequisites.size() > 5;
            if (tooMany) {
                println("Checking too many prerequisites for " + self.name);
            }
            return not tooMany;
        }
        
        message: "A course cannot have more than 5 prerequisites"

        fix {
            title: "Remove extra prerequisites"
            do {
                self.prerequisites.removeAll(self.prerequisites.subList(5, self.prerequisites.size()));
            }
        }
    }
    
	constraint ValidCreditHours {
        check: self.creditHours >= 1 and self.creditHours <= 6
        message: "Course credit hours must be between 1 and 6"
    }

    constraint PrerequisitesNotIncludeSelf {
        check: not self.prerequisites.includes(self)
        message: "A course cannot be a prerequisite of itself"
    }
}

context GraduationRequirement {
    @lazy
    constraint ValidRequirements {
        check: self.requiredCourses.isNotEmpty() or self.requiredCourseCategories.isNotEmpty()
        message: "A GraduationRequirement must have at least one required course or one required course category"
    }
}

context Department {
    constraint ValidName {
        check: self.name.trim().size() > 0
        message: "Department name must not be empty"

        fix {
            title: "Set name to 'Unknown'"
            do {
                self.name = 'Unknown';
            }
        }
    }

    constraint AtLeastOneTeacher {
        check: self.teachers.size() > 0
        message: "A department must have at least one teacher"
    }
}

context DegreeProgram {
    constraint ValidName {
        check: self.name.trim().size() > 0
        message: "DegreeProgram name must not be empty"

        fix {
            title: "Set name to 'Unknown'"
            do {
                self.name = 'Unknown';
            }
        }
    }
}

context Teacher {
    constraint ValidName {
        check: self.name.trim().size() > 0
        message: "Teacher name must not be empty"

        fix {
            title: "Set name to 'Unknown'"
            do {
                self.name = 'Unknown';
            }
        }
    }
}

post {
    ("# Courses="+numCourses).println();
}
